#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <ctype.h>
#include <time.h>

// Battle ship - (project B & H)

#define GRID 10

// ship structure
struct Ship
{
    char name[20];
    int size;
    int hits;
    int sank;
    int row;
    int col;
    int direction;
};

// player structure
struct Player
{
    char name[50];
    char grid[GRID][GRID];
    char copiedGird[GRID][GRID];
    char difficulty[10];
    struct Ship ships[4];
    int smokeScreenUsageNB;
    int smokeScreenTracker;
    int artilleryOneRoundTracker;
    int artilleryActivity;
    int radarsweeepNB;
    int botHasLastHit;
    int lastHitCol;
    int lastHitRow;
};

// creates grid
void gridCreate(char grid[GRID][GRID])
{
    for (int i = 0; i < GRID; i++)
    {
        for (int j = 0; j < GRID; j++)
        {
            grid[i][j] = '~';
        }
    }
}

// displays current player grid
void gridDisplay(char grid[GRID][GRID])
{
    printf("   A B C D E F G H I J\n");
    for (int i = 0; i < GRID; i++)
    {
        printf("%2d ", i + 1);
        for (int j = 0; j < GRID; j++)
        {
            printf("%c ", grid[i][j]);
        }
        printf("\n");
    }
}

// displays enemy grid
void gridDisplayOpp(char grid[GRID][GRID])
{
    char NewGird[GRID][GRID];

    for (int i = 0; i < GRID; i++)
    {
        for (int j = 0; j < GRID; j++)
        {
            if (grid[i][j] == '*')
            {
                NewGird[i][j] = '*';
            }
            else if (grid[i][j] == 'o')
            {
                NewGird[i][j] = 'o';
            }
            else
            {
                NewGird[i][j] = '~';
            }
        }
    }

    printf("   A B C D E F G H I J\n");
    for (int i = 0; i < GRID; i++)
    {
        printf("%2d ", i + 1);
        for (int j = 0; j < GRID; j++)
        {
            printf("%c ", NewGird[i][j]);
        }
        printf("\n");
    }
}

// displays enemy grid in hard mode
void gridDisplayOppHARD(char grid[GRID][GRID])
{
    char NewGird[GRID][GRID];

    for (int i = 0; i < GRID; i++)
    {
        for (int j = 0; j < GRID; j++)
        {
            if (grid[i][j] == '*' || grid[i][j] == 'o')
            {
                NewGird[i][j] = 'o';
            }
            else
            {
                NewGird[i][j] = '~';
            }
        }
    }

    printf("   A B C D E F G H I J\n");
    for (int i = 0; i < GRID; i++)
    {
        printf("%2d ", i + 1);
        for (int j = 0; j < GRID; j++)
        {
            printf("%c ", NewGird[i][j]);
        }
        printf("\n");
    }
}

// creates a grid copy
void gridCopy(char grid[GRID][GRID], char copyGrid[GRID][GRID])
{
    for (int i = 0; i < GRID; i++)
    {
        for (int j = 0; j < GRID; j++)
        {
            copyGrid[i][j] = grid[i][j];
        }
    }
}

// initializes ship
void createShip(struct Player *player)
{
    player->ships[0] = (struct Ship){"Carrier", 5, 0, 0, 0, 0, 0};
    player->ships[1] = (struct Ship){"Battleship", 4, 0, 0, 0, 0, 0};
    player->ships[2] = (struct Ship){"Destroyer", 3, 0, 0, 0, 0, 0};
    player->ships[3] = (struct Ship){"Submarine", 2, 0, 0, 0, 0, 0};
}

// checks if ship can be placed in the grid and without overlap
int canPlaceShip(char grid[GRID][GRID], int row, int col, int size, char dir)
{
    if (dir == 'h')
    {
        if (col + size > GRID)
        {
            return 0;
        }

        for (int j = col; j < col + size; j++)
        {
            if (grid[row][j] != '~')
            {
                return 0;
            }
        }
    }
    else if (dir == 'v')
    {
        if (row + size > GRID)
            return 0;
        for (int i = row; i < row + size; i++)
        {
            if (grid[i][col] != '~')
                return 0;
        }
    }
    return 1;
}

// places a players ships
void placeShip(struct Player *player)
{
    for (int i = 0; i < 4; i++)
    {
        struct Ship *curShip = &player->ships[i];
        int x, y;

        while (true)
        {
            printf("Enter the coordinates of (Ship: \"%s\", size: \"%d\"): ", curShip->name, curShip->size);
            char col, dir;
            int read = scanf(" %c%d %c", &col, &x, &dir);

            col = toupper((unsigned char)col);
            dir = toupper((unsigned char)dir);
            x--;

            if (read != 3 || x < 0 || x >= GRID || col < 'A' || col > 'J')
            {
                printf("Invalid input. Please try again.\n");
                while (getchar() != '\n')
                    ;
                continue;
            }

            y = col - 'A';

            if (dir == 'H' && canPlaceShip(player->grid, x, y, curShip->size, 'h'))
            {
                // fix row, change col
                for (int i = y; i < y + curShip->size; i++)
                {
                    player->grid[x][i] = curShip->name[0];
                }
                break;
            }
            else if (dir == 'V' && canPlaceShip(player->grid, x, y, curShip->size, 'v'))
            {
                // fix col, change row
                for (int i = x; i < x + curShip->size; i++)
                {
                    player->grid[i][y] = curShip->name[0];
                }
                break;
            }
            else
            {
                printf("Invalid Placement! Please try again.\n");
            }
        }
    }
}

// random generator updates to cur time
void initializeRandom()
{
    srand((unsigned int)time(0));
}

// generates random number to pick between ships
int generateRand()
{
    return rand() % 2;
}

// places bot ships
void botPlaceShip(struct Player *player)
{
    for (int i = 0; i < 4; i++)
    {
        struct Ship *curShip = &player->ships[i];
        int row, col;
        char dir;

        initializeRandom();
        while (true)
        {
            dir = (rand() % 2 == 0) ? 'h' : 'v';

            if (dir == 'h')
            {
                row = rand() % GRID;
                col = rand() % (GRID - curShip->size + 1);
            }
            else
            {
                row = rand() % (GRID - curShip->size + 1);
                col = rand() % GRID;
            }

            if (canPlaceShip(player->grid, row, col, curShip->size, dir))
            {
                // fix row, change col
                if (dir == 'h')
                {
                    for (int i = col; i < col + curShip->size; i++)
                    {
                        player->grid[row][i] = curShip->name[0];
                    }
                }
                else
                {
                    for (int i = row; i < row + curShip->size; i++)
                    {
                        player->grid[i][col] = curShip->name[0];
                    }
                }
                break;
            }
        }
    }
}

void gamePlay(struct Player *curPlayer, struct Player *oppPlayer);

// counts nymber of ships sunk for the given player
int countTotalSank(struct Player *player)
{
    int count = 0;
    for (int i = 0; i < 4; i++)
    {
        if (player->ships[i].sank == 1)
        {
            count++;
        }
    }
    return count;
}

// fire method - 2 player
void fire(struct Player *curPlayer, struct Player *oppPlayer, int row, int col)
{
    // was attacked
    if (oppPlayer->grid[row][col] == '*' || oppPlayer->grid[row][col] == 'o')
    {
        printf("You already attacked the given coordinates (%c%D)! Try again.\n", 'A' + col, row + 1);
        gamePlay(curPlayer, oppPlayer);
        return;
    }

    // smokescreen
    if (oppPlayer->grid[row][col] == 'X')
    {
        printf("The fire attack was blocked by smoke screen!\n");
        return;
    }

    // hit
    if (oppPlayer->grid[row][col] != '~')
    {
        if (strcmp(curPlayer->difficulty, "easy") == 0)
        {
            printf("Hit At Coordinates (%c%D)!\n", 'A' + col, row + 1);
        }

        char shipNameLetter = oppPlayer->grid[row][col];
        oppPlayer->grid[row][col] = '*';

        for (int i = 0; i < 4; i++)
        {
            if (oppPlayer->ships[i].name[0] == shipNameLetter)
            {
                oppPlayer->ships[i].hits++;

                if (oppPlayer->ships[i].size == oppPlayer->ships[i].hits && oppPlayer->ships[i].sank == 0)
                {
                    printf("The \"%s\" has sank!\n", oppPlayer->ships[i].name);
                    oppPlayer->ships[i].sank = 1;

                    // for artillery round checker
                    curPlayer->artilleryActivity = 2;
                    curPlayer->artilleryOneRoundTracker = 2;
                }
            }
        }
    }
    else // miss
    {
        if (strcmp(curPlayer->difficulty, "easy") == 0)
        {
            printf("Miss At Coordinates (%c%D)!\n", 'A' + col, row + 1);
        }

        oppPlayer->grid[row][col] = 'o';
    }
}

// radar sweep - 2 player
void radarsweep(struct Player *curPlayer, struct Player *oppPlayer, int row, int col)
{
    if (curPlayer->radarsweeepNB == 0)
    {
        printf("You have used  all the available Radar Sweeps! \n");
        gamePlay(curPlayer, oppPlayer);
        return;
    }
    else
    {
        if (row + 2 > GRID || col + 2 > GRID)
        {
            printf("Out of bounds!\n");
            gamePlay(curPlayer, oppPlayer);
            return;
        }

        for (int i = row; i < row + 2; i++)
        {

            for (int j = col; j < col + 2; j++)
            {

                if (oppPlayer->grid[i][j] != '~' && oppPlayer->grid[i][j] != 'o' && oppPlayer->grid[i][j] != '*' && oppPlayer->grid[i][j] != 'X')
                {

                    printf("A ship was located at the 2x2 area starting from the coordinate (%c%d)!\n", 'A' + col, row + 1);
                    oppPlayer->radarsweeepNB--;
                    return;
                }
            }
        }
    }
    printf("No ship was detected at the  2x2 area starting from the coordinate (%c%d)!\n", 'A' + col, row + 1);
    return;
}

// smokescreen - 2 player
void smokescreen(struct Player *curPlayer, struct Player *oppPlayer, int row, int col)
{
    if (curPlayer->smokeScreenUsageNB == 0)
    {
        printf("You used all of the 3 smoke screens you have!\n");
        return;
    }
    else
    {
        if (row + 2 > GRID || col + 2 > GRID)
        {
            printf("Out of bounds!\n");
            gamePlay(curPlayer, oppPlayer);
            return;
        }

        printf("Activating 2x2 smoke screen area at coordinates (%c%d)!\n", 'A' + col, row + 1);
        curPlayer->smokeScreenTracker = 2;
        gridCopy(curPlayer->grid, curPlayer->copiedGird);

        for (int i = row; i < row + 2; i++)
        {
            for (int j = col; j < col + 2; j++)
            {
                if (curPlayer->grid[i][j] != '*')
                {
                    curPlayer->grid[i][j] = 'X';
                }
            }
        }
    }
}

// checks smokescreen: expired or not, keeps track of usages
void checkSmokeScreen(struct Player *curPlayer)
{
    int smokescreenFound = 0;

    if (curPlayer->smokeScreenTracker != 0)
    {
        curPlayer->smokeScreenTracker--;
    }

    if (curPlayer->smokeScreenTracker == 0)
    {
        for (int i = 0; i < GRID; i++)
        {
            for (int j = 0; j < GRID; j++)
            {
                if (curPlayer->grid[i][j] == 'X')
                {
                    curPlayer->grid[i][j] = curPlayer->copiedGird[i][j];
                    smokescreenFound = 1;
                }
            }
        }

        if (smokescreenFound == 1)
        {
            curPlayer->smokeScreenUsageNB--;
            printf("Smokescreen effect have expired! (%d usages left)\n", curPlayer->smokeScreenUsageNB);
        }

        return;
    }
}

// artillery attack 2x2
void artillery(struct Player *curPlayer, struct Player *oppPlayer, int row, int col)
{
    // validates coordinates
    if (row < 0 || row + 1 >= GRID || col < 0 || col + 1 >= GRID)
    {
        printf("Invalid artillery coordinates. Out of bounds.\n");
        gamePlay(curPlayer, oppPlayer);
        return;
    }

    // hits 2x2 area
    for (int i = row; i < row + 2 && i < GRID; i++)
    {
        for (int j = col; j < col + 2 && j < GRID; j++)
        {
            if (oppPlayer->grid[i][j] != 'o' && oppPlayer->grid[i][j] != '*')
            {
                fire(curPlayer, oppPlayer, i, j);
            }
        }
    }

    curPlayer->artilleryActivity = 0;
}

// ensures artillery usage
void checkArtilleryRound(struct Player *curPlayer)
{
    if (curPlayer->artilleryOneRoundTracker == 0)
    {
        curPlayer->artilleryActivity = 0;
    }

    if (curPlayer->artilleryOneRoundTracker > 0)
    {
        curPlayer->artilleryActivity--;
        curPlayer->artilleryOneRoundTracker--;
    }
}

// torpedo attack : row
void torpedoColumn(struct Player *curPlayer, struct Player *oppPlayer, int col)
{
    if (countTotalSank(oppPlayer) < 3)
    {
        printf("You cannot use 'torpedo' unless you sank 3 opponent ships!\n");
        gamePlay(curPlayer, oppPlayer);
        return;
    }

    printf("Activating 'torpedo' for column: %c\n", col);
    for (int row = 0; row < GRID; row++)
    {
        if (oppPlayer->grid[row][col] != '*' && oppPlayer->grid[row][col] != 'o')
        {
            fire(oppPlayer, oppPlayer, row, col);
        }
    }
}

// torpedo attack : row
void torpedoRow(struct Player *curPlayer, struct Player *oppPlayer, int row)
{
    if (countTotalSank(oppPlayer) < 3)
    {
        printf("You cannot use 'torpedo' unless you sank 3 opponent ships!\n");
        gamePlay(curPlayer, oppPlayer);
        return;
    }

    printf("Activating 'torpedo' for row: %d\n", row + 1);
    for (int col = 0; col < GRID; col++)
    {
        if (oppPlayer->grid[row][col] != '*' && oppPlayer->grid[row][col] != 'o')
        {
            fire(oppPlayer, oppPlayer, row, col);
        }
    }
}

// gameplay - 2 player
void gamePlay(struct Player *curPlayer, struct Player *oppPlayer)
{
    char input[30];
    char command[15];
    int row;
    char col;

    checkSmokeScreen(curPlayer);
    checkArtilleryRound(curPlayer);

    while (1)
    {
        printf("Enter the Command & Coordinates (eg. Fire A1): ");

        if (fgets(input, sizeof(input), stdin) == NULL)
        {
            printf("Error reading input. Please try again.\n");
            continue;
        }

        input[strcspn(input, "\n")] = '\0';

        char *token = strtok(input, " ");

        if (token == NULL)
        {
            printf("Invalid input format. Use the format: (command) (col)(row) (e.g., Fire A1).\n");
            continue;
        }

        strncpy(command, token, sizeof(command));

        command[sizeof(command) - 1] = '\0';

        for (int i = 0; command[i]; i++)
        {
            command[i] = tolower((unsigned char)command[i]);
        }

        token = strtok(NULL, " ");

        // checks for torpedo

        if (strcmp(command, "torpedo") == 0)
        {
            if (token == NULL || strlen(token) != 1)
            {
                printf("Invalid input for 'torpedo'. Provide a single column (A-J) or row number (1-10).\n");
                continue;
            }

            // checks torpedo col

            if ((token[0] >= 'A' && token[0] <= 'J') || (token[0] >= 'a' && token[0] <= 'j'))
            {
                col = toupper((unsigned char)token[0]);
                if (col < 'A' || col >= 'A' + GRID)
                {
                    printf("Invalid column. Column must be A-J.\n");
                    continue;
                }

                torpedoColumn(curPlayer, oppPlayer, col - 'A');
                return;
            }
            else if (isdigit(token[0])) // checks torpedo row
            {
                row = atoi(token);
                if (row < 1 || row > GRID)
                {
                    printf("Invalid row. Row must be between 1-10.\n");
                    continue;
                }

                row--;

                torpedoRow(curPlayer, oppPlayer, row);
                return;
            }
            else
            {
                printf("Invalid input for 'torpedo'. Provide a single column (A-J) or row number (1-10).\n");
                continue;
            }
        }

        else if (token == NULL || sscanf(token, "%c%d", &col, &row) != 2)
        {
            printf("Invalid coordinates format. Use the format: (command) (col)(row) (e.g., Fire A1).\n");
            continue;
        }

        if (token == NULL || sscanf(token, "%c%d", &col, &row) != 2)
        {
            printf("Invalid coordinates format. Use the format: (command) (col)(row) (e.g., Fire A1).\n");
            continue;
        }

        if (col >= 'a' && col <= 'j')
        {
            col = col - 'a' + 'A';
        }

        if (row < 1 || row > GRID || col < 'A' || col >= 'A' + GRID)
        {
            printf("Invalid coordinates. Column must be A-J and Row between 1-10.\n");
            continue;
        }

        row--;
        int newCol = col - 'A';

        // Handle commands

        if (strcmp(command, "fire") == 0) // fire attack
        {

            fire(curPlayer, oppPlayer, row, newCol);
            return;
        }
        else if (strcmp(command, "radarsweep") == 0) // radarsweep
        {
            radarsweep(curPlayer, oppPlayer, row, newCol);
            return;
        }
        else if (strcmp(command, "smokescreen") == 0) // smokescreen
        {
            smokescreen(curPlayer, oppPlayer, row, newCol);
            return;
        }
        else if (strcmp(command, "artillery") == 0) // artillery
        {

            if (curPlayer->artilleryActivity == 1)
            {
                artillery(curPlayer, oppPlayer, row, newCol);
            }
            else
            {
                printf("Artillery can be activated only if you sank a ship in the previous round!\n");
            }
            return;
        }
        else
        {
            printf("Unknown command: %s. Valid commands are 'fire' or 'smokescreen'.\n", command);
        }
    }
}

// bot fire method
void botFire(struct Player *curPlayer, struct Player *oppPlayer)
{
    static int visited[GRID][GRID] = {0};
    static int firstHitRow = -1, firstHitCol = -1;

    if (curPlayer->botHasLastHit == 1) // Smart targeting mode
    {
        printf("Smart targeting mode\n");

        // Check all four directions from the last hit
        int directions[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        for (int d = 0; d < 4; d++)
        {
            int newRow = curPlayer->lastHitRow + directions[d][0];
            int newCol = curPlayer->lastHitCol + directions[d][1];

            if (newRow >= 0 && newRow < GRID && newCol >= 0 && newCol < GRID &&
                !visited[newRow][newCol] && oppPlayer->grid[newRow][newCol] != 'o')
            {
                printf("Firing at (%d, %d)\n", newRow, newCol);
                fire(curPlayer, oppPlayer, newRow, newCol);
                visited[newRow][newCol] = 1;

                if (oppPlayer->grid[newRow][newCol] == '*')
                {
                    printf("Hit detected! Continuing ship hunt.\n");
                    curPlayer->lastHitRow = newRow;
                    curPlayer->lastHitCol = newCol;

                    if (firstHitRow == -1 && firstHitCol == -1)
                    {
                        firstHitRow = curPlayer->lastHitRow;
                        firstHitCol = curPlayer->lastHitCol;
                    }
                }
                return;
            }
        }

        // Backtrack to first hit, if no hit detected
        printf("Backtracking to first hit at (%d, %d)\n", firstHitRow, firstHitCol);
        for (int d = 0; d < 4; d++)
        {
            int newRow = firstHitRow + directions[d][0];
            int newCol = firstHitCol + directions[d][1];

            if (newRow >= 0 && newRow < GRID && newCol >= 0 && newCol < GRID &&
                !visited[newRow][newCol] && oppPlayer->grid[newRow][newCol] != 'o')
            {
                printf("Firing at (%d, %d)\n", newRow, newCol);
                fire(curPlayer, oppPlayer, newRow, newCol);
                visited[newRow][newCol] = 1;

                if (oppPlayer->grid[newRow][newCol] == '*')
                {
                    printf("Hit detected! Continuing ship hunt.\n");
                    curPlayer->lastHitRow = newRow;
                    curPlayer->lastHitCol = newCol;
                }
                return;
            }
        }

        // all directions around the first and last hit failed, reset smart mode
        printf("Resetting smart targeting.\n");
        curPlayer->botHasLastHit = 0;
        firstHitRow = -1;
        firstHitCol = -1;
    }

    // Random targeting mode
    printf("Random targeting mode\n");
    while (1)
    {
        int row = rand() % GRID;
        int col = rand() % GRID;

        if (!visited[row][col] && oppPlayer->grid[row][col] != 'o')
        {
            printf("Firing randomly at (%d, %d)\n", row, col);
            fire(curPlayer, oppPlayer, row, col);
            visited[row][col] = 1;

            if (oppPlayer->grid[row][col] == '*')
            {
                printf("Hit detected! Switching to smart targeting mode.\n");
                curPlayer->botHasLastHit = 1;
                curPlayer->lastHitRow = row;
                curPlayer->lastHitCol = col;

                firstHitRow = row;
                firstHitCol = col;
            }
            return;
        }
    }
}

// bot gameplay, calls all bot methods accoridng to conditions
void botGamePlay(struct Player *curPlayer, struct Player *oppPlayer)
{
    botFire(curPlayer, oppPlayer);
    return;
}

// checks winner
int checkWin(struct Player *oppPlayer)
{
    int count = countTotalSank(oppPlayer);

    if (count == 4)
    {
        return 1;
    }

    return 0;
}

// easy 2 player mode main
void easyMain(struct Player *player1, struct Player *player2)
{
    initializeRandom();
    int firstPlayer = generateRand();
    struct Player *curPlayer = firstPlayer == 0 ? player1 : player2;
    struct Player *oppPlayer = firstPlayer == 0 ? player2 : player1;

    while (1)
    {
        printf("════");
        for (int i = 0; i < 5; i++)
        {
            printf("════  ⚓ ════");
        }
        printf("════");

        printf("\n");

        printf("\n%s's turn.\n", curPlayer->name);

        printf("\n");
        gridDisplay(curPlayer->grid);

        printf("Opponent's grid: \n");
        gridDisplayOpp(oppPlayer->grid);

        gamePlay(curPlayer, oppPlayer);

        if (checkWin(oppPlayer) == 1)
        {
            printf("%s Wins The Game!\n", curPlayer->name);
            break;
        }

        struct Player *temp = curPlayer;
        curPlayer = oppPlayer;
        oppPlayer = temp;
    }
    return;
}

// hard 2 player mode main
void hardMain(struct Player *p1, struct Player *p2)
{
    initializeRandom();
    int firstPlayer = generateRand();
    struct Player *curPlayer = firstPlayer == 0 ? p1 : p2;
    struct Player *oppPlayer = firstPlayer == 0 ? p2 : p1;

    while (1)
    {
        printf("════");
        for (int i = 0; i < 5; i++)
        {
            printf("════  ⚓ ════");
        }
        printf("════");

        printf("\n");

        printf("\n%s's turn.\n", curPlayer->name);

        printf("\n");

        printf("Opponent's grid: \n");
        gridDisplayOppHARD(oppPlayer->grid);

        gamePlay(curPlayer, oppPlayer);

        if (false) // if (checkWin(oppPlayer))
        {
            printf("%s wins!\n", curPlayer->name);
            break;
        }

        struct Player *temp = curPlayer;
        curPlayer = oppPlayer;
        oppPlayer = temp;
    }
    return;
}

// one player mode, bot main
void botMain(struct Player *player1, struct Player *player2)
{
    initializeRandom();
    int firstPlayer = generateRand();
    struct Player *curPlayer = firstPlayer == 0 ? player1 : player2;
    struct Player *oppPlayer = firstPlayer == 0 ? player2 : player1;

    while (true)
    {
        printf("════");
        for (int i = 0; i < 5; i++)
        {
            printf("════  ⚓ ════");
        }
        printf("════");

        printf("\n");

        printf("\n%s's turn.\n", curPlayer->name);

        printf("\n");
        gridDisplay(curPlayer->grid);

        printf("Opponent's grid: \n");
        gridDisplayOpp(oppPlayer->grid);

        if (strcmp(curPlayer->name, "Bob") == 0)
        {
            botGamePlay(curPlayer, oppPlayer);
        }
        else
        {
            gamePlay(curPlayer, oppPlayer);
        }

        if (checkWin(oppPlayer))
        {
            printf("%s wins!\n", curPlayer->name);
            break;
        }

        struct Player *temp = curPlayer;
        curPlayer = oppPlayer;
        oppPlayer = temp;
    }
    return;
}

// main
int main()
{
    struct Player player1, player2;
    srand(0);

    int numPlayers;

    printf("Welcome To Battleship Game!\n\n");

    // picks game mode
    while (1)
    {
        printf(" Game Play (1 or 2): \n");
        printf("--------------------------\n");
        printf("1) One Player Game - Against A Bot\n");
        printf("2) Two Player Game \n");
        printf("--------------------------\n");
        printf("Pick game mode (1 or 2): ");
        scanf("%d", &numPlayers);

        if (numPlayers == 1 || numPlayers == 2)
        {
            break;
        }
        else
        {
            printf("Invalid choice. Please enter '1' or '2'.\n");
        }
    }

    // For option 2: 2 player - picks difficulty
    char difficulty[10];

    if (numPlayers == 2)
    {
        while (1)
        {
            printf("Choose difficulty level (easy/hard): ");
            scanf("%s", difficulty);

            for (int i = 0; difficulty[i] != '\0'; i++)
            {
                difficulty[i] = tolower((unsigned char)difficulty[i]);
            }

            if (strcmp(difficulty, "easy") == 0 || strcmp(difficulty, "hard") == 0)
            {
                break;
            }
            else
            {
                printf("Invalid choice. Please enter 'easy' or 'hard'.\n");
            }
        }
    }
    else
    {
        strcpy(difficulty, "easy");
    }

    strcpy(player1.difficulty, difficulty);
    strcpy(player2.difficulty, player1.difficulty);

    // Players initializers

    printf("Enter the name for Player 1: ");
    scanf("%s", player1.name);

    if (numPlayers == 2)
    {
        printf("Enter the name for Player 2: ");
        scanf("%s", player2.name);
    }
    else
    {
        strcpy(player2.name, "Bob");
        printf("You are playing against our bot, Bob!\n");
    }

    // displays & calls the chosen mode

    printf("For player 1:\n");
    gridCreate(player1.grid);
    player1.radarsweeepNB = 3;
    player1.smokeScreenUsageNB = 3;
    player1.smokeScreenTracker = 0;
    player1.artilleryOneRoundTracker = 0;
    player1.artilleryActivity = 0;
    player1.botHasLastHit = 0;
    player1.lastHitCol = 0;
    player1.lastHitRow = 0;
    createShip(&player1);
    placeShip(&player1);
    printf("Player 1's grid:\n");
    gridDisplay(player1.grid);

    while (getchar() != '\n')
        ;
    printf("Press Enter to continue...");
    while (getchar() != '\n')
        ;
    for (int i = 0; i < 100; i++)
    {
        printf("\n");
    }

    if (numPlayers == 2)
    {
        printf("For player 2:\n");
        gridCreate(player2.grid);
        player2.radarsweeepNB = 3;
        player2.smokeScreenUsageNB = 3;
        player2.smokeScreenTracker = 0;
        player2.artilleryOneRoundTracker = 0;
        player2.artilleryActivity = 0;
        player2.botHasLastHit = 0;
        player2.lastHitCol = 0;
        player2.lastHitRow = 0;
        createShip(&player2);
        placeShip(&player2);
        printf("Player 2's grid:\n");
        gridDisplay(player2.grid);

        while (getchar() != '\n')
            ;
        printf("Press Enter to continue...");
        while (getchar() != '\n')
            ;
        for (int i = 0; i < 100; i++)
        {
            printf("\n");
        }
    }
    else
    {
        printf("For Player 2 (Bob):\n");
        gridCreate(player2.grid);
        player2.radarsweeepNB = 3;
        player2.smokeScreenUsageNB = 3;
        player2.smokeScreenTracker = 0;
        player2.artilleryOneRoundTracker = 0;
        player2.artilleryActivity = 0;
        player2.botHasLastHit = 0;
        player2.lastHitCol = 0;
        player2.lastHitRow = 0;
        createShip(&player2);
        botPlaceShip(&player2);
        printf("Bob's Grid:\n");
        gridDisplay(player2.grid);
        printf("Bob's Gird has been created successfully!\n");
    }

    if (numPlayers == 1)
    {
        botMain(&player1, &player2);
    }
    else
    {
        if (strcmp(player1.difficulty, "easy") == 0)
        {
            easyMain(&player1, &player2);
        }
        else if (strcmp(player1.difficulty, "hard") == 0)
        {
            hardMain(&player1, &player2);
        }
    }

    return 0;
}
